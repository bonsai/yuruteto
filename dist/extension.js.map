{"version":3,"file":"extension.js","mappings":"23BAMA,oBAAyBA,GACxBC,QAAQC,IAAI,6DAGZ,MAAMC,EAAaC,EAAOC,SAASC,gBAAgB,uBAAwB,KAC1EC,EAAYC,aAAaR,EAAQS,gBAGlCT,EAAQU,cAAcC,KAAKR,EAC5B,EA4nBA,wBAA8B,EAzoB9B,kBAkBA,MAAMI,EACEK,oBACAA,gBAA2B,SAEjBC,OACAC,cACTC,aAAoC,GAErC,mBAAOP,CAAaC,GAC1B,MAAMO,EAASZ,EAAOa,OAAOC,iBAC1Bd,EAAOa,OAAOC,iBAAiBC,gBAC/BC,EAGH,GAAIb,EAAYc,aAEf,YADAd,EAAYc,aAAaR,OAAOS,OAAON,GAKxC,MAAMO,EAAQnB,EAAOa,OAAOO,mBAC3BjB,EAAYkB,SACZ,cACAT,GAAUZ,EAAOsB,WAAWC,IAC5B,CAECC,eAAe,EAEfC,mBAAoB,CAACzB,EAAO0B,IAAIC,SAAStB,EAAc,YAIzDF,EAAYc,aAAe,IAAId,EAAYgB,EAAOd,EACnD,CAEA,YAAoBc,EAA4Bd,GAC/CuB,KAAKnB,OAASU,EACdS,KAAKlB,cAAgBL,EAGrBuB,KAAKC,UAILD,KAAKnB,OAAOqB,aAAa,IAAMF,KAAKG,UAAW,KAAMH,KAAKjB,cAG1DiB,KAAKnB,OAAOuB,QAAQC,oBACnBC,IAEO,UADEA,EAAQC,SAEdnC,EAAOa,OAAOuB,iBAAiBF,EAAQG,OAI1C,KACAT,KAAKjB,aAEP,CAEO,OAAAoB,GAMN,IALA5B,EAAYc,kBAAeD,EAG3BY,KAAKnB,OAAOsB,UAELH,KAAKjB,aAAa2B,QAAQ,CAChC,MAAMC,EAAIX,KAAKjB,aAAa6B,MACxBD,GACHA,EAAER,SAEJ,CACD,CAEQ,OAAAF,GACP,MAAMG,EAAUJ,KAAKnB,OAAOuB,QAC5BJ,KAAKnB,OAAOgC,MAAQ,cACpBb,KAAKnB,OAAOuB,QAAQU,KAAOd,KAAKe,mBAAmBX,EACpD,CAEQ,kBAAAW,CAAmBX,GAI1B,MAAO,k9GAFUA,EAAQY,aAAa5C,EAAO0B,IAAIC,SAASC,KAAKlB,cAAe,QAAS,4/UAiiBxF,E,UCvoBDmC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBnC,IAAjBoC,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://yuruteto/./src/extension.ts","webpack://yuruteto/external commonjs \"vscode\"","webpack://yuruteto/webpack/bootstrap","webpack://yuruteto/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('Congratulations, your extension \"yuruteto\" is now active!');\n\n\t// Register the Tetris game command\n\tconst disposable = vscode.commands.registerCommand('yuruteto.startTetris', () => {\n\t\tTetrisPanel.createOrShow(context.extensionUri);\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n/**\n * Manages Tetris webview panels\n */\nclass TetrisPanel {\n\tpublic static currentPanel: TetrisPanel | undefined;\n\tpublic static readonly viewType = 'tetris';\n\n\tprivate readonly _panel: vscode.WebviewPanel;\n\tprivate readonly _extensionUri: vscode.Uri;\n\tprivate _disposables: vscode.Disposable[] = [];\n\n\tpublic static createOrShow(extensionUri: vscode.Uri) {\n\t\tconst column = vscode.window.activeTextEditor\n\t\t\t? vscode.window.activeTextEditor.viewColumn\n\t\t\t: undefined;\n\n\t\t// If we already have a panel, show it.\n\t\tif (TetrisPanel.currentPanel) {\n\t\t\tTetrisPanel.currentPanel._panel.reveal(column);\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise, create a new panel.\n\t\tconst panel = vscode.window.createWebviewPanel(\n\t\t\tTetrisPanel.viewType,\n\t\t\t'Tetris Game',\n\t\t\tcolumn || vscode.ViewColumn.One,\n\t\t\t{\n\t\t\t\t// Enable javascript in the webview\n\t\t\t\tenableScripts: true,\n\t\t\t\t// And restrict the webview to only loading content from our extension's `media` directory.\n\t\t\t\tlocalResourceRoots: [vscode.Uri.joinPath(extensionUri, 'media')]\n\t\t\t}\n\t\t);\n\n\t\tTetrisPanel.currentPanel = new TetrisPanel(panel, extensionUri);\n\t}\n\n\tprivate constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n\t\tthis._panel = panel;\n\t\tthis._extensionUri = extensionUri;\n\n\t\t// Set the webview's initial html content\n\t\tthis._update();\n\n\t\t// Listen for when the panel is disposed\n\t\t// This happens when the user closes the panel or when the panel is closed programmatically\n\t\tthis._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n\t\t// Handle messages from the webview\n\t\tthis._panel.webview.onDidReceiveMessage(\n\t\t\tmessage => {\n\t\t\t\tswitch (message.command) {\n\t\t\t\t\tcase 'alert':\n\t\t\t\t\t\tvscode.window.showErrorMessage(message.text);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t},\n\t\t\tnull,\n\t\t\tthis._disposables\n\t\t);\n\t}\n\n\tpublic dispose() {\n\t\tTetrisPanel.currentPanel = undefined;\n\n\t\t// Clean up our resources\n\t\tthis._panel.dispose();\n\n\t\twhile (this._disposables.length) {\n\t\t\tconst x = this._disposables.pop();\n\t\t\tif (x) {\n\t\t\t\tx.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _update() {\n\t\tconst webview = this._panel.webview;\n\t\tthis._panel.title = 'Tetris Game';\n\t\tthis._panel.webview.html = this._getHtmlForWebview(webview);\n\t}\n\n\tprivate _getHtmlForWebview(webview: vscode.Webview) {\n\t\t// Get the URI for the audio file\n\t\tconst audioUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'suno.bgm.mp3'));\n\t\t\n\t\treturn `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Tetris Game</title>\n\t<style>\n\t\tbody {\n\t\t\tfont-family: var(--vscode-font-family);\n\t\t\tbackground-color: var(--vscode-editor-background);\n\t\t\tcolor: var(--vscode-editor-foreground);\n\t\t\tmargin: 0;\n\t\t\tpadding: 20px;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tmin-height: 100vh;\n\t\t}\n\t\t\n\t\t.game-container {\n\t\t\tdisplay: flex;\n\t\t\tgap: 20px;\n\t\t\talign-items: flex-start;\n\t\t}\n\t\t\n\t\t.game-board {\n\t\t\tborder: 2px solid var(--vscode-panel-border);\n\t\t\tbackground-color: #000;\n\t\t}\n\t\t\n\t\t.game-info {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tgap: 10px;\n\t\t\tmin-width: 150px;\n\t\t}\n\t\t\n\t\t.info-panel {\n\t\t\tbackground-color: var(--vscode-panel-background);\n\t\t\tborder: 1px solid var(--vscode-panel-border);\n\t\t\tpadding: 10px;\n\t\t\tborder-radius: 4px;\n\t\t}\n\t\t\n\t\t.controls {\n\t\t\tfont-size: 12px;\n\t\t\tline-height: 1.4;\n\t\t}\n\t\t\n\t\tbutton {\n\t\t\tbackground-color: var(--vscode-button-background);\n\t\t\tcolor: var(--vscode-button-foreground);\n\t\t\tborder: none;\n\t\t\tpadding: 8px 16px;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t\twidth: 100%;\n\t\t\tmargin-top: 10px;\n\t\t}\n\t\t\n\t\tbutton:hover {\n\t\t\tbackground-color: var(--vscode-button-hoverBackground);\n\t\t}\n\t\t\n\t\t.score, .level, .lines {\n\t\t\tmargin: 5px 0;\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\t.audio-controls {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 10px;\n\t\t\tmargin-top: 10px;\n\t\t}\n\n\t\t.audio-controls button {\n\t\t\twidth: auto;\n\t\t\tpadding: 4px 8px;\n\t\t\tmargin: 0;\n\t\t}\n\n\t\t.volume-control {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 5px;\n\t\t\tmargin-top: 5px;\n\t\t}\n\n\t\t.volume-control input {\n\t\t\twidth: 80px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"game-container\">\n\t\t<canvas id=\"gameCanvas\" class=\"game-board\" width=\"300\" height=\"600\"></canvas>\n\t\t<div class=\"game-info\">\n\t\t\t<div class=\"info-panel\">\n\t\t\t\t<div class=\"score\">Score: <span id=\"score\">0</span></div>\n\t\t\t\t<div class=\"level\">Level: <span id=\"level\">1</span></div>\n\t\t\t\t<div class=\"lines\">Lines: <span id=\"lines\">0</span></div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"info-panel\">\n\t\t\t\t<h4>Next Piece</h4>\n\t\t\t\t<canvas id=\"nextCanvas\" width=\"120\" height=\"120\"></canvas>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"info-panel controls\">\n\t\t\t\t<h4>Controls</h4>\n\t\t\t\t<div>‚Üê ‚Üí : Move</div>\n\t\t\t\t<div>‚Üì : Soft Drop</div>\n\t\t\t\t<div>‚Üë : Rotate</div>\n\t\t\t\t<div>Space : Hard Drop</div>\n\t\t\t\t<div>P : Pause</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"info-panel\">\n\t\t\t\t<h4>üéµ BGM</h4>\n\t\t\t\t<div class=\"audio-controls\">\n\t\t\t\t\t<button id=\"playPauseBtn\">üéµ Play</button>\n\t\t\t\t\t<button id=\"stopBtn\">‚èπÔ∏è Stop</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"volume-control\">\n\t\t\t\t\t<span>Volume:</span>\n\t\t\t\t\t<input type=\"range\" id=\"volumeSlider\" min=\"0\" max=\"100\" value=\"30\">\n\t\t\t\t\t<span id=\"volumeValue\">30%</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<button id=\"startButton\">Start Game</button>\n\t\t\t<button id=\"pauseButton\">Pause</button>\n\t\t\t<button id=\"resetButton\">Reset</button>\n\t\t</div>\n\t</div>\n\n\t<!-- BGM Audio Element -->\n\t<audio id=\"bgmAudio\" loop preload=\"auto\">\n\t\t<source src=\"${audioUri}\" type=\"audio/mpeg\">\n\t\tYour browser does not support the audio element.\n\t</audio>\n\n\t<script>\n\t\tconst canvas = document.getElementById('gameCanvas');\n\t\tconst ctx = canvas.getContext('2d');\n\t\tconst nextCanvas = document.getElementById('nextCanvas');\n\t\tconst nextCtx = nextCanvas.getContext('2d');\n\t\t\n\t\t// BGM Controls\n\t\tconst bgmAudio = document.getElementById('bgmAudio');\n\t\tconst playPauseBtn = document.getElementById('playPauseBtn');\n\t\tconst stopBtn = document.getElementById('stopBtn');\n\t\tconst volumeSlider = document.getElementById('volumeSlider');\n\t\tconst volumeValue = document.getElementById('volumeValue');\n\t\t\n\t\t// Set initial volume\n\t\tbgmAudio.volume = 0.3;\n\t\t\n\t\t// BGM Control Handlers\n\t\tplayPauseBtn.addEventListener('click', () => {\n\t\t\tif (bgmAudio.paused) {\n\t\t\t\tbgmAudio.play().then(() => {\n\t\t\t\t\tplayPauseBtn.textContent = '‚è∏Ô∏è Pause';\n\t\t\t\t}).catch(e => {\n\t\t\t\t\tconsole.log('Audio play failed:', e);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tbgmAudio.pause();\n\t\t\t\tplayPauseBtn.textContent = 'üéµ Play';\n\t\t\t}\n\t\t});\n\t\t\n\t\tstopBtn.addEventListener('click', () => {\n\t\t\tbgmAudio.pause();\n\t\t\tbgmAudio.currentTime = 0;\n\t\t\tplayPauseBtn.textContent = 'üéµ Play';\n\t\t});\n\t\t\n\t\tvolumeSlider.addEventListener('input', (e) => {\n\t\t\tconst volume = e.target.value / 100;\n\t\t\tbgmAudio.volume = volume;\n\t\t\tvolumeValue.textContent = e.target.value + '%';\n\t\t});\n\t\t\n\t\t// Auto-play BGM when game starts (with user interaction)\n\t\tlet bgmStarted = false;\n\t\t\n\t\tconst BOARD_WIDTH = 10;\n\t\tconst BOARD_HEIGHT = 20;\n\t\tconst BLOCK_SIZE = 30;\n\t\t\n\t\t// Tetris pieces (tetrominoes)\n\t\tconst PIECES = [\n\t\t\t// I piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[1, 1, 1, 1],\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// O piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[0, 1, 1, 0],\n\t\t\t\t[0, 1, 1, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// T piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[0, 1, 0, 0],\n\t\t\t\t[1, 1, 1, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// S piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[0, 1, 1, 0],\n\t\t\t\t[1, 1, 0, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// Z piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[1, 1, 0, 0],\n\t\t\t\t[0, 1, 1, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// J piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[1, 0, 0, 0],\n\t\t\t\t[1, 1, 1, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t],\n\t\t\t// L piece\n\t\t\t[\n\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t[0, 0, 1, 0],\n\t\t\t\t[1, 1, 1, 0],\n\t\t\t\t[0, 0, 0, 0]\n\t\t\t]\n\t\t];\n\t\t\n\t\tconst COLORS = [\n\t\t\t'#00FFFF', // I - Cyan\n\t\t\t'#FFFF00', // O - Yellow\n\t\t\t'#800080', // T - Purple\n\t\t\t'#00FF00', // S - Green\n\t\t\t'#FF0000', // Z - Red\n\t\t\t'#0000FF', // J - Blue\n\t\t\t'#FFA500'  // L - Orange\n\t\t];\n\t\t\n\t\tlet board = [];\n\t\tlet currentPiece = null;\n\t\tlet nextPiece = null;\n\t\tlet currentX = 0;\n\t\tlet currentY = 0;\n\t\tlet score = 0;\n\t\tlet level = 1;\n\t\tlet lines = 0;\n\t\tlet gameRunning = false;\n\t\tlet gameLoop = null;\n\t\tlet dropTime = 0;\n\t\tlet lastTime = 0;\n\t\t\n\t\t// Initialize game board\n\t\tfunction initBoard() {\n\t\t\tboard = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n\t\t}\n\t\t\n\t\t// Create new piece\n\t\tfunction createPiece() {\n\t\t\tconst pieceIndex = Math.floor(Math.random() * PIECES.length);\n\t\t\treturn {\n\t\t\t\tshape: PIECES[pieceIndex],\n\t\t\t\tcolor: pieceIndex,\n\t\t\t\trotation: 0\n\t\t\t};\n\t\t}\n\t\t\n\t\t// Rotate piece matrix\n\t\tfunction rotatePiece(piece) {\n\t\t\tconst rotated = piece.shape[0].map((_, i) =>\n\t\t\t\tpiece.shape.map(row => row[i]).reverse()\n\t\t\t);\n\t\t\treturn { ...piece, shape: rotated };\n\t\t}\n\t\t\n\t\t// Check if piece can be placed at position\n\t\tfunction isValidPosition(piece, x, y) {\n\t\t\tfor (let py = 0; py < 4; py++) {\n\t\t\t\tfor (let px = 0; px < 4; px++) {\n\t\t\t\t\tif (piece.shape[py][px]) {\n\t\t\t\t\t\tconst newX = x + px;\n\t\t\t\t\t\tconst newY = y + py;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (newX < 0 || newX >= BOARD_WIDTH || \n\t\t\t\t\t\t\tnewY >= BOARD_HEIGHT || \n\t\t\t\t\t\t\t(newY >= 0 && board[newY][newX])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// Place piece on board\n\t\tfunction placePiece() {\n\t\t\tfor (let py = 0; py < 4; py++) {\n\t\t\t\tfor (let px = 0; px < 4; px++) {\n\t\t\t\t\tif (currentPiece.shape[py][px]) {\n\t\t\t\t\t\tconst x = currentX + px;\n\t\t\t\t\t\tconst y = currentY + py;\n\t\t\t\t\t\tif (y >= 0) {\n\t\t\t\t\t\t\tboard[y][x] = currentPiece.color + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Clear completed lines\n\t\tfunction clearLines() {\n\t\t\tlet linesCleared = 0;\n\t\t\tfor (let y = BOARD_HEIGHT - 1; y >= 0; y--) {\n\t\t\t\tif (board[y].every(cell => cell !== 0)) {\n\t\t\t\t\tboard.splice(y, 1);\n\t\t\t\t\tboard.unshift(Array(BOARD_WIDTH).fill(0));\n\t\t\t\t\tlinesCleared++;\n\t\t\t\t\ty++; // Check this line again\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (linesCleared > 0) {\n\t\t\t\tlines += linesCleared;\n\t\t\t\tscore += linesCleared * 100 * level;\n\t\t\t\tlevel = Math.floor(lines / 10) + 1;\n\t\t\t\tupdateUI();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Move piece down\n\t\tfunction dropPiece() {\n\t\t\tif (isValidPosition(currentPiece, currentX, currentY + 1)) {\n\t\t\t\tcurrentY++;\n\t\t\t} else {\n\t\t\t\tplacePiece();\n\t\t\t\tclearLines();\n\t\t\t\tspawnNewPiece();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Spawn new piece\n\t\tfunction spawnNewPiece() {\n\t\t\tcurrentPiece = nextPiece;\n\t\t\tnextPiece = createPiece();\n\t\t\tcurrentX = Math.floor(BOARD_WIDTH / 2) - 2;\n\t\t\tcurrentY = 0;\n\t\t\t\n\t\t\tif (!isValidPosition(currentPiece, currentX, currentY)) {\n\t\t\t\tgameOver();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Game over\n\t\tfunction gameOver() {\n\t\t\tgameRunning = false;\n\t\t\talert('Game Over! Score: ' + score);\n\t\t}\n\t\t\n\t\t// Update UI elements\n\t\tfunction updateUI() {\n\t\t\tdocument.getElementById('score').textContent = score;\n\t\t\tdocument.getElementById('level').textContent = level;\n\t\t\tdocument.getElementById('lines').textContent = lines;\n\t\t}\n\t\t\n\t\t// Draw block\n\t\tfunction drawBlock(ctx, x, y, color) {\n\t\t\tctx.fillStyle = COLORS[color];\n\t\t\tctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n\t\t\tctx.strokeStyle = '#FFF';\n\t\t\tctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n\t\t}\n\t\t\n\t\t// Draw board\n\t\tfunction drawBoard() {\n\t\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\t\t\n\t\t\tfor (let y = 0; y < BOARD_HEIGHT; y++) {\n\t\t\t\tfor (let x = 0; x < BOARD_WIDTH; x++) {\n\t\t\t\t\tif (board[y][x]) {\n\t\t\t\t\t\tdrawBlock(ctx, x, y, board[y][x] - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Draw current piece\n\t\tfunction drawCurrentPiece() {\n\t\t\tif (currentPiece) {\n\t\t\t\tfor (let py = 0; py < 4; py++) {\n\t\t\t\t\tfor (let px = 0; px < 4; px++) {\n\t\t\t\t\t\tif (currentPiece.shape[py][px]) {\n\t\t\t\t\t\t\tdrawBlock(ctx, currentX + px, currentY + py, currentPiece.color);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Draw next piece\n\t\tfunction drawNextPiece() {\n\t\t\tnextCtx.clearRect(0, 0, nextCanvas.width, nextCanvas.height);\n\t\t\tif (nextPiece) {\n\t\t\t\tfor (let py = 0; py < 4; py++) {\n\t\t\t\t\tfor (let px = 0; px < 4; px++) {\n\t\t\t\t\t\tif (nextPiece.shape[py][px]) {\n\t\t\t\t\t\t\tnextCtx.fillStyle = COLORS[nextPiece.color];\n\t\t\t\t\t\t\tnextCtx.fillRect(px * 20 + 10, py * 20 + 10, 20, 20);\n\t\t\t\t\t\t\tnextCtx.strokeStyle = '#FFF';\n\t\t\t\t\t\t\tnextCtx.strokeRect(px * 20 + 10, py * 20 + 10, 20, 20);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Game loop\n\t\tfunction gameUpdate(time = 0) {\n\t\t\tif (!gameRunning) return;\n\t\t\t\n\t\t\tconst deltaTime = time - lastTime;\n\t\t\tlastTime = time;\n\t\t\tdropTime += deltaTime;\n\t\t\t\n\t\t\tif (dropTime > 1000 / level) {\n\t\t\t\tdropPiece();\n\t\t\t\tdropTime = 0;\n\t\t\t}\n\t\t\t\n\t\t\tdrawBoard();\n\t\t\tdrawCurrentPiece();\n\t\t\tdrawNextPiece();\n\t\t\t\n\t\t\trequestAnimationFrame(gameUpdate);\n\t\t}\n\t\t\n\t\t// Start game\n\t\tfunction startGame() {\n\t\t\tinitBoard();\n\t\t\tscore = 0;\n\t\t\tlevel = 1;\n\t\t\tlines = 0;\n\t\t\tgameRunning = true;\n\t\t\t\n\t\t\tcurrentPiece = createPiece();\n\t\t\tnextPiece = createPiece();\n\t\t\tcurrentX = Math.floor(BOARD_WIDTH / 2) - 2;\n\t\t\tcurrentY = 0;\n\t\t\t\n\t\t\tupdateUI();\n\t\t\t\n\t\t\t// Start BGM when game starts\n\t\t\tif (!bgmStarted) {\n\t\t\t\tbgmAudio.play().then(() => {\n\t\t\t\t\tplayPauseBtn.textContent = '‚è∏Ô∏è Pause';\n\t\t\t\t\tbgmStarted = true;\n\t\t\t\t}).catch(e => {\n\t\t\t\t\tconsole.log('BGM autoplay failed:', e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\trequestAnimationFrame(gameUpdate);\n\t\t}\n\t\t\n\t\t// Pause game\n\t\tfunction pauseGame() {\n\t\t\tgameRunning = !gameRunning;\n\t\t\tif (gameRunning) {\n\t\t\t\trequestAnimationFrame(gameUpdate);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Reset game\n\t\tfunction resetGame() {\n\t\t\tgameRunning = false;\n\t\t\tstartGame();\n\t\t}\n\t\t\n\t\t// Handle keyboard input\n\t\tdocument.addEventListener('keydown', (e) => {\n\t\t\tif (!gameRunning || !currentPiece) return;\n\t\t\t\n\t\t\tswitch (e.key) {\n\t\t\t\tcase 'ArrowLeft':\n\t\t\t\t\tif (isValidPosition(currentPiece, currentX - 1, currentY)) {\n\t\t\t\t\t\tcurrentX--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ArrowRight':\n\t\t\t\t\tif (isValidPosition(currentPiece, currentX + 1, currentY)) {\n\t\t\t\t\t\tcurrentX++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ArrowDown':\n\t\t\t\t\tif (isValidPosition(currentPiece, currentX, currentY + 1)) {\n\t\t\t\t\t\tcurrentY++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ArrowUp':\n\t\t\t\t\tconst rotated = rotatePiece(currentPiece);\n\t\t\t\t\tif (isValidPosition(rotated, currentX, currentY)) {\n\t\t\t\t\t\tcurrentPiece = rotated;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ' ':\n\t\t\t\t\twhile (isValidPosition(currentPiece, currentX, currentY + 1)) {\n\t\t\t\t\t\tcurrentY++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'p':\n\t\t\t\tcase 'P':\n\t\t\t\t\tpauseGame();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Button event listeners\n\t\tdocument.getElementById('startButton').addEventListener('click', startGame);\n\t\tdocument.getElementById('pauseButton').addEventListener('click', pauseGame);\n\t\tdocument.getElementById('resetButton').addEventListener('click', resetGame);\n\t\t\n\t\t// Initialize\n\t\tinitBoard();\n\t\tdrawBoard();\n\t</script>\n</body>\n</html>`;\n\t}\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","TetrisPanel","createOrShow","extensionUri","subscriptions","push","static","_panel","_extensionUri","_disposables","column","window","activeTextEditor","viewColumn","undefined","currentPanel","reveal","panel","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","this","_update","onDidDispose","dispose","webview","onDidReceiveMessage","message","command","showErrorMessage","text","length","x","pop","title","html","_getHtmlForWebview","asWebviewUri","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}